import { createSignal, onMount, Switch, Match, JSXElement} from "solid-js";
import api from '../api';

export function SetupMFAModal(props: {isOpen: boolean, onClose: () => void}): JSXElement {
  const [step, setStep] = createSignal(1);
  const [totpSecret, setTotpSecret] = createSignal<string | null>(null)

  const nextStep = () => setStep((prev) => prev + 1);
  const prevStep = () => setStep((prev) => prev - 1);

  return (
    <div class={`modal ${props.isOpen ? "modal-open" : ""}`}>
      <div class="modal-box">
        <Switch>
          <Match when={step() === 1}>
            <QRCodeStep nextStep={nextStep} onSecretReceived={(secret) => setTotpSecret(secret)} />
          </Match>

          <Match when={step() === 2}>
            <ConfirmTOTPStep totpSecret={totpSecret()} onClose={props.onClose} prevStep={prevStep}/>
          </Match>
        </Switch>
        <button class="modal-backdrop" onClick={() => props.onClose()} />
      </div>
    </div>
  );
}


function QRCodeStep(props: {nextStep: () => void, onSecretReceived: (secret: string) => void}): JSXElement {
  const [qrCode, setQrCode] = createSignal<string | null>(null)

  const fetchQRCode = async () => {
    const response = await api.get('/generate_totp_secret')
    console.log(response.status)
    if (response.status == 200) {
      setQrCode(response.data.qr_code);
      props.onSecretReceived(response.data.totp_secret);
    }
  }

  onMount(() => {
    fetchQRCode();
  })

  return (
    <div>
      <h3 class="font-bold text-xl">Step 1: Scan QR code with your authenticator app</h3>

      <div class="my-8 flex justify-center">
        <img src={`data:image/png;base64,${qrCode()}`} alt="TOTP QR Code" width="50%" />
      </div>

      <div class="modal-action">
        <button class="btn btn-primary" onClick={() => props.nextStep()}>
          Next
        </button>
      </div>
    </div>
  )
}

function ConfirmTOTPStep(props: {totpSecret: string, prevStep: () => void, onClose: () => void}): JSXElement {
  const [totpCode, setTotpCode] = createSignal("");
  const [verificationStatus, setVerificationStatus] = createSignal("");

  const verifyTotp = async () => {
    const response = await api.post('/verify_totp', {totp: totpCode(), totp_secret: props.totpSecret});

    setVerificationStatus(response.data.success ? "Success" : "Invalid code");
    if (response.data.success) {
      props.onClose();
    }
  };

  return (
    <div>
      <h3 class="font-bold text-lg">Step 2: Verify the setup by filling in the 2FA code</h3>
      <p class="py-4">
        Enter the 6-digit code generated by your authenticator app.
      </p>

      <input
        type="text"
        class="input input-bordered w-full"
        placeholder=""
        value={totpCode()}
        onInput={(e) => setTotpCode(e.target.value)}
      />

      {verificationStatus() && (
        <p class="mt-2 text-sm">
          {verificationStatus() === "Success"
            ? "2FA setup successful!"
            : "Invalid code, please try again."}
        </p>
      )}

      <div class="modal-action">
        <button class="btn btn-outline" onClick={() => props.prevStep()}>
          Previous
        </button>
        <button class="btn btn-primary" onClick={verifyTotp}>
          Verify
        </button>
      </div>
    </div>
  )
}
